// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/proto/api.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceMessagesClient is the client API for ServiceMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceMessagesClient interface {
	RequestNewToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	GetMyRooms(ctx context.Context, in *MyRoomsRequest, opts ...grpc.CallOption) (*MyRoomsResponse, error)
	SendFastMessage(ctx context.Context, in *FastMessageRequest, opts ...grpc.CallOption) (*FastMessageResponse, error)
	SendMessageInRoom(ctx context.Context, in *SendMessageInRoomRequest, opts ...grpc.CallOption) (*SendMessageInRoomResponse, error)
	SendMessageByRefID(ctx context.Context, in *SendMessageByRefIDRequest, opts ...grpc.CallOption) (*SendMessageByRefIDResponse, error)
	GetMessagesInRoom(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
	GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	GetPrivateRoomWithoutCreate(ctx context.Context, in *GetPrivateRoomWithoutCreateRequest, opts ...grpc.CallOption) (*MyRoom, error)
	SetZeroUnreadCount(ctx context.Context, in *SetZeroUnreadCountRequest, opts ...grpc.CallOption) (*SetZeroUnreadCountResponse, error)
}

type serviceMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceMessagesClient(cc grpc.ClientConnInterface) ServiceMessagesClient {
	return &serviceMessagesClient{cc}
}

func (c *serviceMessagesClient) RequestNewToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/RequestNewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) GetMyRooms(ctx context.Context, in *MyRoomsRequest, opts ...grpc.CallOption) (*MyRoomsResponse, error) {
	out := new(MyRoomsResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/GetMyRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) SendFastMessage(ctx context.Context, in *FastMessageRequest, opts ...grpc.CallOption) (*FastMessageResponse, error) {
	out := new(FastMessageResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/SendFastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) SendMessageInRoom(ctx context.Context, in *SendMessageInRoomRequest, opts ...grpc.CallOption) (*SendMessageInRoomResponse, error) {
	out := new(SendMessageInRoomResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/SendMessageInRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) SendMessageByRefID(ctx context.Context, in *SendMessageByRefIDRequest, opts ...grpc.CallOption) (*SendMessageByRefIDResponse, error) {
	out := new(SendMessageByRefIDResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/SendMessageByRefID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) GetMessagesInRoom(ctx context.Context, in *MessagesRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/GetMessagesInRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) GetUserInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) GetPrivateRoomWithoutCreate(ctx context.Context, in *GetPrivateRoomWithoutCreateRequest, opts ...grpc.CallOption) (*MyRoom, error) {
	out := new(MyRoom)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/GetPrivateRoomWithoutCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMessagesClient) SetZeroUnreadCount(ctx context.Context, in *SetZeroUnreadCountRequest, opts ...grpc.CallOption) (*SetZeroUnreadCountResponse, error) {
	out := new(SetZeroUnreadCountResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ServiceMessages/SetZeroUnreadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceMessagesServer is the server API for ServiceMessages service.
// All implementations must embed UnimplementedServiceMessagesServer
// for forward compatibility
type ServiceMessagesServer interface {
	RequestNewToken(context.Context, *TokenRequest) (*TokenResponse, error)
	GetMyRooms(context.Context, *MyRoomsRequest) (*MyRoomsResponse, error)
	SendFastMessage(context.Context, *FastMessageRequest) (*FastMessageResponse, error)
	SendMessageInRoom(context.Context, *SendMessageInRoomRequest) (*SendMessageInRoomResponse, error)
	SendMessageByRefID(context.Context, *SendMessageByRefIDRequest) (*SendMessageByRefIDResponse, error)
	GetMessagesInRoom(context.Context, *MessagesRequest) (*MessagesResponse, error)
	GetUserInfo(context.Context, *UserRequest) (*User, error)
	GetPrivateRoomWithoutCreate(context.Context, *GetPrivateRoomWithoutCreateRequest) (*MyRoom, error)
	SetZeroUnreadCount(context.Context, *SetZeroUnreadCountRequest) (*SetZeroUnreadCountResponse, error)
	mustEmbedUnimplementedServiceMessagesServer()
}

// UnimplementedServiceMessagesServer must be embedded to have forward compatible implementations.
type UnimplementedServiceMessagesServer struct {
}

func (UnimplementedServiceMessagesServer) RequestNewToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNewToken not implemented")
}
func (UnimplementedServiceMessagesServer) GetMyRooms(context.Context, *MyRoomsRequest) (*MyRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyRooms not implemented")
}
func (UnimplementedServiceMessagesServer) SendFastMessage(context.Context, *FastMessageRequest) (*FastMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFastMessage not implemented")
}
func (UnimplementedServiceMessagesServer) SendMessageInRoom(context.Context, *SendMessageInRoomRequest) (*SendMessageInRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageInRoom not implemented")
}
func (UnimplementedServiceMessagesServer) SendMessageByRefID(context.Context, *SendMessageByRefIDRequest) (*SendMessageByRefIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageByRefID not implemented")
}
func (UnimplementedServiceMessagesServer) GetMessagesInRoom(context.Context, *MessagesRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesInRoom not implemented")
}
func (UnimplementedServiceMessagesServer) GetUserInfo(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedServiceMessagesServer) GetPrivateRoomWithoutCreate(context.Context, *GetPrivateRoomWithoutCreateRequest) (*MyRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateRoomWithoutCreate not implemented")
}
func (UnimplementedServiceMessagesServer) SetZeroUnreadCount(context.Context, *SetZeroUnreadCountRequest) (*SetZeroUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetZeroUnreadCount not implemented")
}
func (UnimplementedServiceMessagesServer) mustEmbedUnimplementedServiceMessagesServer() {}

// UnsafeServiceMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceMessagesServer will
// result in compilation errors.
type UnsafeServiceMessagesServer interface {
	mustEmbedUnimplementedServiceMessagesServer()
}

func RegisterServiceMessagesServer(s grpc.ServiceRegistrar, srv ServiceMessagesServer) {
	s.RegisterService(&ServiceMessages_ServiceDesc, srv)
}

func _ServiceMessages_RequestNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).RequestNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/RequestNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).RequestNewToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_GetMyRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).GetMyRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/GetMyRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).GetMyRooms(ctx, req.(*MyRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_SendFastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).SendFastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/SendFastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).SendFastMessage(ctx, req.(*FastMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_SendMessageInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageInRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).SendMessageInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/SendMessageInRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).SendMessageInRoom(ctx, req.(*SendMessageInRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_SendMessageByRefID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageByRefIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).SendMessageByRefID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/SendMessageByRefID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).SendMessageByRefID(ctx, req.(*SendMessageByRefIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_GetMessagesInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).GetMessagesInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/GetMessagesInRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).GetMessagesInRoom(ctx, req.(*MessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).GetUserInfo(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_GetPrivateRoomWithoutCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateRoomWithoutCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).GetPrivateRoomWithoutCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/GetPrivateRoomWithoutCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).GetPrivateRoomWithoutCreate(ctx, req.(*GetPrivateRoomWithoutCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMessages_SetZeroUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetZeroUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMessagesServer).SetZeroUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ServiceMessages/SetZeroUnreadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMessagesServer).SetZeroUnreadCount(ctx, req.(*SetZeroUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceMessages_ServiceDesc is the grpc.ServiceDesc for ServiceMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.ServiceMessages",
	HandlerType: (*ServiceMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestNewToken",
			Handler:    _ServiceMessages_RequestNewToken_Handler,
		},
		{
			MethodName: "GetMyRooms",
			Handler:    _ServiceMessages_GetMyRooms_Handler,
		},
		{
			MethodName: "SendFastMessage",
			Handler:    _ServiceMessages_SendFastMessage_Handler,
		},
		{
			MethodName: "SendMessageInRoom",
			Handler:    _ServiceMessages_SendMessageInRoom_Handler,
		},
		{
			MethodName: "SendMessageByRefID",
			Handler:    _ServiceMessages_SendMessageByRefID_Handler,
		},
		{
			MethodName: "GetMessagesInRoom",
			Handler:    _ServiceMessages_GetMessagesInRoom_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _ServiceMessages_GetUserInfo_Handler,
		},
		{
			MethodName: "GetPrivateRoomWithoutCreate",
			Handler:    _ServiceMessages_GetPrivateRoomWithoutCreate_Handler,
		},
		{
			MethodName: "SetZeroUnreadCount",
			Handler:    _ServiceMessages_SetZeroUnreadCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/api.proto",
}
